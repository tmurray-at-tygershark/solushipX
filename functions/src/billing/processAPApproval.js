const { onCall } = require('firebase-functions/v2/https');
const admin = require('firebase-admin');
const logger = require('firebase-functions/logger');

const db = admin.firestore();

/**
 * Process AP Approval Status
 * Updates shipments to mark them as AP-approved when charges are approved through AP Processing
 */
const processAPApproval = onCall({
    cors: true,
    maxInstances: 5,
    timeoutSeconds: 60
}, async (request) => {
    try {
        const { 
            shipmentIds, 
            apProcessingId, 
            carrierInvoiceRef,
            approvalType = 'ap_processing',
            overrideExceptions = false,
            approvalNotes = ''
        } = request.data;
        
        const userId = request.auth?.uid;
        const userEmail = request.auth?.email;

        if (!userId) {
            throw new Error('Authentication required');
        }

        if (!shipmentIds || !Array.isArray(shipmentIds) || shipmentIds.length === 0) {
            throw new Error('Shipment IDs array is required');
        }

        logger.info('üìã Processing AP approval for shipments', {
            shipmentCount: shipmentIds.length,
            apProcessingId,
            userId,
            overrideExceptions
        });

        const results = [];
        const errors = [];

        // Process each shipment
        for (const shipmentId of shipmentIds) {
            try {
                const result = await processShipmentAPApproval(
                    shipmentId, 
                    userId, 
                    userEmail, 
                    apProcessingId,
                    carrierInvoiceRef,
                    overrideExceptions,
                    approvalNotes
                );
                results.push(result);
            } catch (error) {
                logger.error(`‚ùå Failed to approve AP for shipment ${shipmentId}:`, error);
                errors.push({
                    shipmentId,
                    error: error.message
                });
            }
        }

        const successCount = results.filter(r => r.success).length;
        const failureCount = errors.length;

        return {
            success: failureCount === 0,
            processedCount: shipmentIds.length,
            successCount: successCount,
            failureCount: failureCount,
            results: results,
            errors: errors,
            message: `Processed AP approval for ${successCount}/${shipmentIds.length} shipments`
        };

    } catch (error) {
        logger.error('‚ùå AP approval processing error:', error);
        return {
            success: false,
            error: error.message
        };
    }
});

/**
 * Process AP approval for a single shipment
 */
async function processShipmentAPApproval(shipmentId, userId, userEmail, apProcessingId, carrierInvoiceRef, overrideExceptions, approvalNotes) {
    // Get shipment document
    const shipmentDoc = await db.collection('shipments').doc(shipmentId).get();
    if (!shipmentDoc.exists) {
        throw new Error(`Shipment ${shipmentId} not found`);
    }

    const shipmentData = shipmentDoc.data();

    // Check if shipment can be AP approved
    const canApprove = await validateAPApproval(shipmentData);
    if (!canApprove.allowed) {
        throw new Error(canApprove.reason);
    }

    // Prepare AP approval update
    const apApprovalData = {
        chargeStatus: {
            status: 'approved',
            approvalType: 'ap_processing',
            approvedBy: userEmail,
            approvedAt: admin.firestore.FieldValue.serverTimestamp(),
            approvedByUserId: userId,
            overrideExceptions: overrideExceptions,
            approvalNotes: approvalNotes,
            apProcessingId: apProcessingId,
            carrierInvoiceRef: carrierInvoiceRef,
            autoGenerated: false
        },
        
        // Track AP processing approval separately
        apApproval: {
            status: 'approved',
            approvedAt: admin.firestore.FieldValue.serverTimestamp(),
            approvedBy: userEmail,
            apProcessingId: apProcessingId,
            carrierInvoiceRef: carrierInvoiceRef,
            overrideExceptions: overrideExceptions,
            approvalNotes: approvalNotes
        },
        
        // Track approval in status history
        [`statusHistory.${Date.now()}`]: {
            status: shipmentData.status || 'unknown',
            timestamp: admin.firestore.FieldValue.serverTimestamp(),
            note: overrideExceptions ? 
                `AP Processing approval with exception override: ${approvalNotes}` :
                `AP Processing approval: ${approvalNotes}`,
            updatedBy: userEmail,
            type: 'ap_charges_approved',
            changes: {
                apProcessingId: apProcessingId,
                carrierInvoiceRef: carrierInvoiceRef,
                overrideExceptions: overrideExceptions
            }
        }
    };

    // If overriding exceptions, mark them as resolved
    if (overrideExceptions && shipmentData.exceptionStatus?.hasExceptions) {
        apApprovalData.exceptionStatus = {
            ...shipmentData.exceptionStatus,
            resolvedAt: admin.firestore.FieldValue.serverTimestamp(),
            resolvedBy: userEmail,
            resolutionMethod: 'ap_override',
            resolutionNotes: approvalNotes
        };
    }

    // Update shipment document
    await db.collection('shipments').doc(shipmentId).update(apApprovalData);

    // Log AP approval event
    await logAPApprovalEvent(shipmentId, shipmentData.shipmentID, userEmail, apProcessingId, carrierInvoiceRef);

    return {
        success: true,
        shipmentId: shipmentId,
        shipmentID: shipmentData.shipmentID,
        apProcessingId: apProcessingId,
        newStatus: 'ap_approved',
        message: 'AP approval completed successfully'
    };
}

/**
 * Validate if shipment can be AP approved
 */
async function validateAPApproval(shipmentData) {
    // Check if shipment is cancelled
    if (shipmentData.status === 'cancelled' || shipmentData.status === 'canceled') {
        return {
            allowed: false,
            reason: 'Cannot approve AP charges for cancelled shipments'
        };
    }

    // Check if already AP approved
    if (shipmentData.chargeStatus?.status === 'approved' && 
        shipmentData.chargeStatus?.approvalType === 'ap_processing') {
        return {
            allowed: false,
            reason: 'Charges already approved through AP Processing'
        };
    }

    // Check for missing actual costs (should have been updated by AP processing)
    if (!shipmentData.actualRates || !shipmentData.actualRates.totalCharges) {
        return {
            allowed: false,
            reason: 'Cannot approve AP charges without actual cost data from carrier invoice'
        };
    }

    return {
        allowed: true,
        reason: 'Validation passed'
    };
}

/**
 * Log AP approval event for audit trail
 */
async function logAPApprovalEvent(shipmentId, shipmentID, userEmail, apProcessingId, carrierInvoiceRef) {
    try {
        await db.collection('apApprovalLog').add({
            shipmentId: shipmentId,
            shipmentID: shipmentID,
            approvedBy: userEmail,
            approvedAt: admin.firestore.FieldValue.serverTimestamp(),
            apProcessingId: apProcessingId,
            carrierInvoiceRef: carrierInvoiceRef,
            action: 'ap_approval'
        });
    } catch (error) {
        logger.warn('Failed to log AP approval event:', error);
    }
}

module.exports = { processAPApproval }; 